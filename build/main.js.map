{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import { Adapter, AdapterOptions } from \"@iobroker/adapter-core\";\nimport { EventEmitter } from \"events\";\nimport { SenseClient, SenseParser } from \"./lib\";\nimport { SenseDevice } from \"./interfaces\";\n\nclass SenseEnergyMonitor extends Adapter {\n    private client?: SenseClient;\n    private expireSeconds?: number;\n    private parser?: SenseParser;\n\n    public constructor(options: Partial<AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"sense-energy-monitor\",\n        });\n        EventEmitter.captureRejections = true;\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator during startup\n        this.setState(\"info.connection\", false, true);\n\n        // Create a new SenseClient instance and authenticate with the Sense API\n        const client = new SenseClient({ email: this.config.email, password: this.config.password });\n        client.on(\"authenticated\", async () => {\n            this.log.info(\"authenticated to sense api\");\n        });\n\n        client.on(\"connected\", async () => {\n            this.log.info(\"connected to real-time websocket\");\n        });\n\n        client.on(\"hello\", async () => {\n            this.log.info(\"started receiving real-time data\");\n            await this.setStateAsync(\"info.connection\", true, true);\n        });\n\n        client.on(\"disconnected\", async (code: number, reason: Buffer) => {\n            this.log.info(`disconnected from websocket - code ${code} ${reason.toString()}`);\n            await this.setStateAsync(\"info.connection\", false, true);\n        });\n\n        client.on(\"error\", (error) => {\n            this.log.error(error);\n        })\n\n        // Create a new SenseParser instance and configure events\n        const parser = new SenseParser({\n            deviceFilter: this.config.deviceFilter,\n            deviceUpdateSeconds: this.config.deviceUpdateSeconds,\n            generalUpdateSeconds: this.config.generalUpdateSeconds,\n        });\n        client.on(\"realtime_update\", parser.parse.bind(parser));\n\n        // Set the expire time for all states to twice the maximum of the device and general update intervals\n        this.expireSeconds = Math.max(this.config.deviceUpdateSeconds, this.config.generalUpdateSeconds) * 2;\n\n        parser.on(\"gridVoltages\", (voltages: number[]) => {\n            this.setState(\"grid.voltageL1\", { val: voltages[0], ack: true, expire: this.expireSeconds });\n            this.setState(\"grid.voltageL2\", { val: voltages[1], ack: true, expire: this.expireSeconds });\n            this.log.debug(`voltage update: ${voltages.join(\"V, \")}V`);\n        });\n\n        parser.on(\"gridFrequency\", (hz: number) => {\n            this.setState(\"grid.frequency\", { val: hz, ack: true, expire: this.expireSeconds });\n            this.log.debug(`frequency update: ${hz}hz`);\n        });\n\n        parser.on(\"gridWatts\", (watts: number[]) => {\n            this.setState(\"grid.wattage\", { val: watts[0] + watts[1], ack: true, expire: this.expireSeconds });\n            this.setState(\"grid.wattageL1\", { val: watts[0], ack: true, expire: this.expireSeconds });\n            this.setState(\"grid.wattageL2\", { val: watts[1], ack: true, expire: this.expireSeconds });\n            this.log.debug(`gridWatts update: ${watts.join(\"W, \")}W`);\n        });\n\n        parser.on(\"device\", async (device: SenseDevice) => {\n            this.log.debug(`device update: ${device.name} (${device.id}) ${device.w}W`);\n\n            await this.setObjectNotExistsAsync(`devices.${device.id}`, {\n                type: \"device\",\n                common: {\n                    name: device.name,\n                    icon: device.icon\n                },\n                native: {},\n            });\n\n            await this.setObjectNotExistsAsync(`devices.${device.id}.watts`, {\n                type: \"state\",\n                common: {\n                    name: `${device.name} Watts`,\n                    type: \"number\",\n                    role: \"value\",\n                    unit: \"W\",\n                    read: true,\n                    write: false,\n                },\n                native: {}\n            });\n\n            await this.setObjectNotExistsAsync(`devices.${device.id}.power`, {\n                type: \"state\",\n                common: {\n                    name: `${device.name} Power`,\n                    type: \"boolean\",\n                    role: \"switch.power\",\n                    read: true,\n                    write: false,\n                },\n                native: {}\n            });\n\n            await this.setStateAsync(`devices.${device.id}.watts`, {\n                val: device.w,\n                ack: true,\n                expire: device.w ? this.expireSeconds : undefined\n            });\n\n            await this.setStateAsync(`devices.${device.id}.power`, {\n                val: device.w > this.config.onWattThreshold,\n                ack: true,\n                expire: device.w ? this.expireSeconds : undefined\n            });\n        });\n\n        this.client = client;\n        this.parser = parser;\n        await client.start(); // start real-time updates\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        this.log.info(\"shutting down Sense Energy Monitor adapter\");\n        try {\n            if (this.client) {\n                this.client.removeAllListeners();\n                this.client.stop().then(() => this.client = undefined);\n            }\n        } finally {\n            callback();\n        }\n    }\n\n\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<AdapterOptions> | undefined) => new SenseEnergyMonitor(options);\n} else {\n    // otherwise start the instance directly\n    (() => new SenseEnergyMonitor())();\n}\n"],
  "mappings": ";AAAA,0BAAwC;AACxC,oBAA6B;AAC7B,iBAAyC;AAGzC,MAAM,2BAA2B,4BAAQ;AAAA,EAK9B,YAAY,UAAmC,CAAC,GAAG;AACtD,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,+BAAa,oBAAoB;AACjC,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAEnC,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAG5C,UAAM,SAAS,IAAI,uBAAY,EAAE,OAAO,KAAK,OAAO,OAAO,UAAU,KAAK,OAAO,SAAS,CAAC;AAC3F,WAAO,GAAG,iBAAiB,YAAY;AACnC,WAAK,IAAI,KAAK,4BAA4B;AAAA,IAC9C,CAAC;AAED,WAAO,GAAG,aAAa,YAAY;AAC/B,WAAK,IAAI,KAAK,kCAAkC;AAAA,IACpD,CAAC;AAED,WAAO,GAAG,SAAS,YAAY;AAC3B,WAAK,IAAI,KAAK,kCAAkC;AAChD,YAAM,KAAK,cAAc,mBAAmB,MAAM,IAAI;AAAA,IAC1D,CAAC;AAED,WAAO,GAAG,gBAAgB,OAAO,MAAc,WAAmB;AAC9D,WAAK,IAAI,KAAK,sCAAsC,QAAQ,OAAO,SAAS,GAAG;AAC/E,YAAM,KAAK,cAAc,mBAAmB,OAAO,IAAI;AAAA,IAC3D,CAAC;AAED,WAAO,GAAG,SAAS,CAAC,UAAU;AAC1B,WAAK,IAAI,MAAM,KAAK;AAAA,IACxB,CAAC;AAGD,UAAM,SAAS,IAAI,uBAAY;AAAA,MAC3B,cAAc,KAAK,OAAO;AAAA,MAC1B,qBAAqB,KAAK,OAAO;AAAA,MACjC,sBAAsB,KAAK,OAAO;AAAA,IACtC,CAAC;AACD,WAAO,GAAG,mBAAmB,OAAO,MAAM,KAAK,MAAM,CAAC;AAGtD,SAAK,gBAAgB,KAAK,IAAI,KAAK,OAAO,qBAAqB,KAAK,OAAO,oBAAoB,IAAI;AAEnG,WAAO,GAAG,gBAAgB,CAAC,aAAuB;AAC9C,WAAK,SAAS,kBAAkB,EAAE,KAAK,SAAS,IAAI,KAAK,MAAM,QAAQ,KAAK,cAAc,CAAC;AAC3F,WAAK,SAAS,kBAAkB,EAAE,KAAK,SAAS,IAAI,KAAK,MAAM,QAAQ,KAAK,cAAc,CAAC;AAC3F,WAAK,IAAI,MAAM,mBAAmB,SAAS,KAAK,KAAK,IAAI;AAAA,IAC7D,CAAC;AAED,WAAO,GAAG,iBAAiB,CAAC,OAAe;AACvC,WAAK,SAAS,kBAAkB,EAAE,KAAK,IAAI,KAAK,MAAM,QAAQ,KAAK,cAAc,CAAC;AAClF,WAAK,IAAI,MAAM,qBAAqB,MAAM;AAAA,IAC9C,CAAC;AAED,WAAO,GAAG,aAAa,CAAC,UAAoB;AACxC,WAAK,SAAS,gBAAgB,EAAE,KAAK,MAAM,KAAK,MAAM,IAAI,KAAK,MAAM,QAAQ,KAAK,cAAc,CAAC;AACjG,WAAK,SAAS,kBAAkB,EAAE,KAAK,MAAM,IAAI,KAAK,MAAM,QAAQ,KAAK,cAAc,CAAC;AACxF,WAAK,SAAS,kBAAkB,EAAE,KAAK,MAAM,IAAI,KAAK,MAAM,QAAQ,KAAK,cAAc,CAAC;AACxF,WAAK,IAAI,MAAM,qBAAqB,MAAM,KAAK,KAAK,IAAI;AAAA,IAC5D,CAAC;AAED,WAAO,GAAG,UAAU,OAAO,WAAwB;AAC/C,WAAK,IAAI,MAAM,kBAAkB,OAAO,SAAS,OAAO,OAAO,OAAO,IAAI;AAE1E,YAAM,KAAK,wBAAwB,WAAW,OAAO,MAAM;AAAA,QACvD,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM,OAAO;AAAA,UACb,MAAM,OAAO;AAAA,QACjB;AAAA,QACA,QAAQ,CAAC;AAAA,MACb,CAAC;AAED,YAAM,KAAK,wBAAwB,WAAW,OAAO,YAAY;AAAA,QAC7D,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM,GAAG,OAAO;AAAA,UAChB,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACX;AAAA,QACA,QAAQ,CAAC;AAAA,MACb,CAAC;AAED,YAAM,KAAK,wBAAwB,WAAW,OAAO,YAAY;AAAA,QAC7D,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM,GAAG,OAAO;AAAA,UAChB,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACX;AAAA,QACA,QAAQ,CAAC;AAAA,MACb,CAAC;AAED,YAAM,KAAK,cAAc,WAAW,OAAO,YAAY;AAAA,QACnD,KAAK,OAAO;AAAA,QACZ,KAAK;AAAA,QACL,QAAQ,OAAO,IAAI,KAAK,gBAAgB;AAAA,MAC5C,CAAC;AAED,YAAM,KAAK,cAAc,WAAW,OAAO,YAAY;AAAA,QACnD,KAAK,OAAO,IAAI,KAAK,OAAO;AAAA,QAC5B,KAAK;AAAA,QACL,QAAQ,OAAO,IAAI,KAAK,gBAAgB;AAAA,MAC5C,CAAC;AAAA,IACL,CAAC;AAED,SAAK,SAAS;AACd,SAAK,SAAS;AACd,UAAM,OAAO,MAAM;AAAA,EACvB;AAAA,EAKQ,SAAS,UAA4B;AACzC,SAAK,IAAI,KAAK,4CAA4C;AAC1D,QAAI;AACA,UAAI,KAAK,QAAQ;AACb,aAAK,OAAO,mBAAmB;AAC/B,aAAK,OAAO,KAAK,EAAE,KAAK,MAAM,KAAK,SAAS,MAAS;AAAA,MACzD;AAAA,IACJ,UAAE;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAGJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAiD,IAAI,mBAAmB,OAAO;AACrG,OAAO;AAEH,GAAC,MAAM,IAAI,mBAAmB,GAAG;AACrC;",
  "names": []
}
